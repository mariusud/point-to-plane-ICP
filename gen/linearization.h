// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace ICP {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Computes the linearization of the residual around the given state,
 * and returns the relevant information about the resulting linear system.
 *
 * Input args: The state to linearize around
 *
 * Output args:
 *     residual (Eigen::Matrix*): The residual vector
 *     jacobian: (1x6) jacobian of residual wrt arg world_T_lidar (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg world_T_lidar (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg world_T_lidar (6)
 */
template <typename Scalar>
void Linearization(const Eigen::Matrix<Scalar, 3, 1>& points_0_,
                   const Eigen::Matrix<Scalar, 3, 1>& points_1_,
                   const Eigen::Matrix<Scalar, 3, 1>& centroids_0_,
                   const Eigen::Matrix<Scalar, 3, 1>& centroids_1_,
                   const Eigen::Matrix<Scalar, 3, 1>& normals_0_,
                   const Eigen::Matrix<Scalar, 3, 1>& normals_1_,
                   const sym::Pose3<Scalar>& world_T_lidar, const Scalar epsilon,
                   Eigen::Matrix<Scalar, 1, 1>* const residual = nullptr,
                   Eigen::Matrix<Scalar, 1, 6>* const jacobian = nullptr,
                   Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                   Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 266

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _world_T_lidar = world_T_lidar.Data();

  // Intermediate terms (74)
  const Scalar _tmp0 = std::pow(_world_T_lidar[0], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_world_T_lidar[2], Scalar(2));
  const Scalar _tmp3 = 1 - 2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = 2 * _world_T_lidar[3];
  const Scalar _tmp6 = _tmp5 * _world_T_lidar[0];
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = 2 * _world_T_lidar[1];
  const Scalar _tmp9 = _tmp8 * _world_T_lidar[2];
  const Scalar _tmp10 = _tmp7 + _tmp9;
  const Scalar _tmp11 = _tmp8 * _world_T_lidar[0];
  const Scalar _tmp12 = _tmp5 * _world_T_lidar[2];
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = std::pow(_world_T_lidar[1], Scalar(2));
  const Scalar _tmp15 = -2 * _tmp14;
  const Scalar _tmp16 = _tmp1 + _tmp15 + 1;
  const Scalar _tmp17 = _tmp6 + _tmp9;
  const Scalar _tmp18 = 2 * _world_T_lidar[0] * _world_T_lidar[2];
  const Scalar _tmp19 = _tmp5 * _world_T_lidar[1];
  const Scalar _tmp20 = -_tmp19;
  const Scalar _tmp21 = _tmp18 + _tmp20;
  const Scalar _tmp22 = _tmp15 + _tmp3;
  const Scalar _tmp23 = -_tmp12;
  const Scalar _tmp24 = _tmp11 + _tmp23;
  const Scalar _tmp25 = _tmp18 + _tmp19;
  const Scalar _tmp26 =
      normals_1_(0, 0) * (_tmp22 * points_1_(0, 0) + _tmp24 * points_1_(1, 0) +
                          _tmp25 * points_1_(2, 0) + _world_T_lidar[4] - centroids_1_(0, 0)) +
      normals_1_(1, 0) * (_tmp10 * points_1_(2, 0) + _tmp13 * points_1_(0, 0) +
                          _tmp4 * points_1_(1, 0) + _world_T_lidar[5] - centroids_1_(1, 0)) +
      normals_1_(2, 0) * (_tmp16 * points_1_(2, 0) + _tmp17 * points_1_(1, 0) +
                          _tmp21 * points_1_(0, 0) + _world_T_lidar[6] - centroids_1_(2, 0));
  const Scalar _tmp27 =
      normals_0_(0, 0) * (_tmp22 * points_0_(0, 0) + _tmp24 * points_0_(1, 0) +
                          _tmp25 * points_0_(2, 0) + _world_T_lidar[4] - centroids_0_(0, 0)) +
      normals_0_(1, 0) * (_tmp10 * points_0_(2, 0) + _tmp13 * points_0_(0, 0) +
                          _tmp4 * points_0_(1, 0) + _world_T_lidar[5] - centroids_0_(1, 0)) +
      normals_0_(2, 0) * (_tmp16 * points_0_(2, 0) + _tmp17 * points_0_(1, 0) +
                          _tmp21 * points_0_(0, 0) + _world_T_lidar[6] - centroids_0_(2, 0));
  const Scalar _tmp28 = std::pow(_tmp26, Scalar(2)) + std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = std::sqrt(_tmp28);
  const Scalar _tmp30 = Scalar(1.0) / (_tmp29);
  const Scalar _tmp31 = -_tmp11;
  const Scalar _tmp32 = _tmp12 + _tmp31;
  const Scalar _tmp33 = -_tmp14;
  const Scalar _tmp34 = std::pow(_world_T_lidar[3], Scalar(2));
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 = _tmp0 + _tmp2 + _tmp33 + _tmp35;
  const Scalar _tmp37 = _tmp33 + _tmp34;
  const Scalar _tmp38 = -_tmp0;
  const Scalar _tmp39 = _tmp2 + _tmp38;
  const Scalar _tmp40 = _tmp37 + _tmp39;
  const Scalar _tmp41 = -_tmp9;
  const Scalar _tmp42 = _tmp41 + _tmp7;
  const Scalar _tmp43 = 2 * _tmp27;
  const Scalar _tmp44 = 2 * _tmp26;
  const Scalar _tmp45 =
      _tmp43 * (normals_0_(0, 0) * (_tmp25 * points_0_(1, 0) + _tmp32 * points_0_(2, 0)) +
                normals_0_(1, 0) * (_tmp10 * points_0_(1, 0) + _tmp36 * points_0_(2, 0)) +
                normals_0_(2, 0) * (_tmp40 * points_0_(1, 0) + _tmp42 * points_0_(2, 0))) +
      _tmp44 * (normals_1_(0, 0) * (_tmp25 * points_1_(1, 0) + _tmp32 * points_1_(2, 0)) +
                normals_1_(1, 0) * (_tmp10 * points_1_(1, 0) + _tmp36 * points_1_(2, 0)) +
                normals_1_(2, 0) * (_tmp40 * points_1_(1, 0) + _tmp42 * points_1_(2, 0)));
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp47 = -_tmp2;
  const Scalar _tmp48 = _tmp0 + _tmp47;
  const Scalar _tmp49 = _tmp37 + _tmp48;
  const Scalar _tmp50 = -_tmp18;
  const Scalar _tmp51 = _tmp20 + _tmp50;
  const Scalar _tmp52 = _tmp14 + _tmp35;
  const Scalar _tmp53 = _tmp48 + _tmp52;
  const Scalar _tmp54 = _tmp41 + _tmp6;
  const Scalar _tmp55 =
      _tmp43 * (normals_0_(0, 0) * (_tmp49 * points_0_(2, 0) + _tmp51 * points_0_(0, 0)) +
                normals_0_(1, 0) * (_tmp13 * points_0_(2, 0) + _tmp54 * points_0_(0, 0)) +
                normals_0_(2, 0) * (_tmp21 * points_0_(2, 0) + _tmp53 * points_0_(0, 0))) +
      _tmp44 * (normals_1_(0, 0) * (_tmp49 * points_1_(2, 0) + _tmp51 * points_1_(0, 0)) +
                normals_1_(1, 0) * (_tmp13 * points_1_(2, 0) + _tmp54 * points_1_(0, 0)) +
                normals_1_(2, 0) * (_tmp21 * points_1_(2, 0) + _tmp53 * points_1_(0, 0)));
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp55;
  const Scalar _tmp57 = _tmp39 + _tmp52;
  const Scalar _tmp58 = _tmp14 + _tmp34 + _tmp38 + _tmp47;
  const Scalar _tmp59 = _tmp23 + _tmp31;
  const Scalar _tmp60 = _tmp19 + _tmp50;
  const Scalar _tmp61 =
      _tmp43 * (normals_0_(0, 0) * (_tmp24 * points_0_(0, 0) + _tmp57 * points_0_(1, 0)) +
                normals_0_(1, 0) * (_tmp58 * points_0_(0, 0) + _tmp59 * points_0_(1, 0)) +
                normals_0_(2, 0) * (_tmp17 * points_0_(0, 0) + _tmp60 * points_0_(1, 0))) +
      _tmp44 * (normals_1_(0, 0) * (_tmp24 * points_1_(0, 0) + _tmp57 * points_1_(1, 0)) +
                normals_1_(1, 0) * (_tmp58 * points_1_(0, 0) + _tmp59 * points_1_(1, 0)) +
                normals_1_(2, 0) * (_tmp17 * points_1_(0, 0) + _tmp60 * points_1_(1, 0)));
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp61;
  const Scalar _tmp63 = _tmp43 * normals_0_(0, 0) + _tmp44 * normals_1_(0, 0);
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp63;
  const Scalar _tmp65 = _tmp43 * normals_0_(1, 0) + _tmp44 * normals_1_(1, 0);
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp65;
  const Scalar _tmp67 = _tmp43 * normals_0_(2, 0) + _tmp44 * normals_1_(2, 0);
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp67;
  const Scalar _tmp69 = (Scalar(1) / Scalar(4)) / _tmp28;
  const Scalar _tmp70 = _tmp45 * _tmp69;
  const Scalar _tmp71 = _tmp55 * _tmp69;
  const Scalar _tmp72 = _tmp63 * _tmp69;
  const Scalar _tmp73 = _tmp67 * _tmp69;

  // Output terms (4)
  if (residual != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _residual = (*residual);

    _residual(0, 0) = _tmp29;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp30 * _tmp46;
    _jacobian(0, 1) = _tmp30 * _tmp56;
    _jacobian(0, 2) = _tmp30 * _tmp62;
    _jacobian(0, 3) = _tmp30 * _tmp64;
    _jacobian(0, 4) = _tmp30 * _tmp66;
    _jacobian(0, 5) = _tmp30 * _tmp68;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp45, Scalar(2)) * _tmp69;
    _hessian(1, 0) = _tmp55 * _tmp70;
    _hessian(2, 0) = _tmp61 * _tmp70;
    _hessian(3, 0) = _tmp63 * _tmp70;
    _hessian(4, 0) = _tmp65 * _tmp70;
    _hessian(5, 0) = _tmp67 * _tmp70;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp55, Scalar(2)) * _tmp69;
    _hessian(2, 1) = _tmp61 * _tmp71;
    _hessian(3, 1) = _tmp63 * _tmp71;
    _hessian(4, 1) = _tmp65 * _tmp71;
    _hessian(5, 1) = _tmp67 * _tmp71;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp61, Scalar(2)) * _tmp69;
    _hessian(3, 2) = _tmp61 * _tmp72;
    _hessian(4, 2) = _tmp61 * _tmp65 * _tmp69;
    _hessian(5, 2) = _tmp61 * _tmp73;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp63, Scalar(2)) * _tmp69;
    _hessian(4, 3) = _tmp65 * _tmp72;
    _hessian(5, 3) = _tmp63 * _tmp73;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp65, Scalar(2)) * _tmp69;
    _hessian(5, 4) = _tmp65 * _tmp73;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp67, Scalar(2)) * _tmp69;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp46;
    _rhs(1, 0) = _tmp56;
    _rhs(2, 0) = _tmp62;
    _rhs(3, 0) = _tmp64;
    _rhs(4, 0) = _tmp66;
    _rhs(5, 0) = _tmp68;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace ICP
