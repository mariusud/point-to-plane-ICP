// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>
#include <Eigen/SparseCore>

#include <sym/pose3.h>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Computes the linearization of the residual around the given state,
 * and returns the relevant information about the resulting linear system.
 *
 * Input args: The state to linearize around
 *
 * Output args:
 *     residual (Eigen::Matrix*): The residual vector
 *     jacobian: (6x6) jacobian of residual wrt arg world_T_lidar (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg world_T_lidar (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg world_T_lidar (6)
 */
template <typename Scalar>
void Linearization(
    const Eigen::Matrix<Scalar, 3, 1>& points_0_, const Eigen::Matrix<Scalar, 3, 1>& points_1_,
    const Eigen::Matrix<Scalar, 3, 1>& points_2_, const Eigen::Matrix<Scalar, 3, 1>& points_3_,
    const Eigen::Matrix<Scalar, 3, 1>& points_4_, const Eigen::Matrix<Scalar, 3, 1>& points_5_,
    const Eigen::Matrix<Scalar, 3, 1>& centroids_0_,
    const Eigen::Matrix<Scalar, 3, 1>& centroids_1_,
    const Eigen::Matrix<Scalar, 3, 1>& centroids_2_,
    const Eigen::Matrix<Scalar, 3, 1>& centroids_3_,
    const Eigen::Matrix<Scalar, 3, 1>& centroids_4_,
    const Eigen::Matrix<Scalar, 3, 1>& centroids_5_, const Eigen::Matrix<Scalar, 3, 1>& normals_0_,
    const Eigen::Matrix<Scalar, 3, 1>& normals_1_, const Eigen::Matrix<Scalar, 3, 1>& normals_2_,
    const Eigen::Matrix<Scalar, 3, 1>& normals_3_, const Eigen::Matrix<Scalar, 3, 1>& normals_4_,
    const Eigen::Matrix<Scalar, 3, 1>& normals_5_, const sym::Pose3<Scalar>& world_T_lidar,
    const Scalar epsilon, Eigen::Matrix<Scalar, 6, 1>* const residual = nullptr,
    Eigen::SparseMatrix<Scalar>* const jacobian = nullptr,
    Eigen::SparseMatrix<Scalar>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 764

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _world_T_lidar = world_T_lidar.Data();

  // Intermediate terms (74)
  const Scalar _tmp0 = std::pow(_world_T_lidar[2], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_world_T_lidar[0], Scalar(2));
  const Scalar _tmp3 = 1 - 2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = 2 * _world_T_lidar[0];
  const Scalar _tmp6 = _tmp5 * _world_T_lidar[3];
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = 2 * _world_T_lidar[2];
  const Scalar _tmp9 = _tmp8 * _world_T_lidar[1];
  const Scalar _tmp10 = _tmp7 + _tmp9;
  const Scalar _tmp11 = _tmp5 * _world_T_lidar[1];
  const Scalar _tmp12 = _tmp8 * _world_T_lidar[3];
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = std::pow(_world_T_lidar[1], Scalar(2));
  const Scalar _tmp15 = -2 * _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp3;
  const Scalar _tmp17 = _tmp6 + _tmp9;
  const Scalar _tmp18 = _tmp8 * _world_T_lidar[0];
  const Scalar _tmp19 = 2 * _world_T_lidar[1] * _world_T_lidar[3];
  const Scalar _tmp20 = -_tmp19;
  const Scalar _tmp21 = _tmp18 + _tmp20;
  const Scalar _tmp22 = _tmp1 + _tmp15 + 1;
  const Scalar _tmp23 = -_tmp12;
  const Scalar _tmp24 = _tmp11 + _tmp23;
  const Scalar _tmp25 = _tmp18 + _tmp19;
  const Scalar _tmp26 =
      normals_0_(0, 0) * (_tmp22 * points_0_(0, 0) + _tmp24 * points_0_(1, 0) +
                          _tmp25 * points_0_(2, 0) + _world_T_lidar[4] - centroids_0_(0, 0)) +
      normals_0_(1, 0) * (_tmp10 * points_0_(2, 0) + _tmp13 * points_0_(0, 0) +
                          _tmp4 * points_0_(1, 0) + _world_T_lidar[5] - centroids_0_(1, 0)) +
      normals_0_(2, 0) * (_tmp16 * points_0_(2, 0) + _tmp17 * points_0_(1, 0) +
                          _tmp21 * points_0_(0, 0) + _world_T_lidar[6] - centroids_0_(2, 0));
  const Scalar _tmp27 =
      normals_1_(0, 0) * (_tmp22 * points_1_(0, 0) + _tmp24 * points_1_(1, 0) +
                          _tmp25 * points_1_(2, 0) + _world_T_lidar[4] - centroids_1_(0, 0)) +
      normals_1_(1, 0) * (_tmp10 * points_1_(2, 0) + _tmp13 * points_1_(0, 0) +
                          _tmp4 * points_1_(1, 0) + _world_T_lidar[5] - centroids_1_(1, 0)) +
      normals_1_(2, 0) * (_tmp16 * points_1_(2, 0) + _tmp17 * points_1_(1, 0) +
                          _tmp21 * points_1_(0, 0) + _world_T_lidar[6] - centroids_1_(2, 0));
  const Scalar _tmp28 =
      normals_2_(0, 0) * (_tmp22 * points_2_(0, 0) + _tmp24 * points_2_(1, 0) +
                          _tmp25 * points_2_(2, 0) + _world_T_lidar[4] - centroids_2_(0, 0)) +
      normals_2_(1, 0) * (_tmp10 * points_2_(2, 0) + _tmp13 * points_2_(0, 0) +
                          _tmp4 * points_2_(1, 0) + _world_T_lidar[5] - centroids_2_(1, 0)) +
      normals_2_(2, 0) * (_tmp16 * points_2_(2, 0) + _tmp17 * points_2_(1, 0) +
                          _tmp21 * points_2_(0, 0) + _world_T_lidar[6] - centroids_2_(2, 0));
  const Scalar _tmp29 =
      normals_3_(0, 0) * (_tmp22 * points_3_(0, 0) + _tmp24 * points_3_(1, 0) +
                          _tmp25 * points_3_(2, 0) + _world_T_lidar[4] - centroids_3_(0, 0)) +
      normals_3_(1, 0) * (_tmp10 * points_3_(2, 0) + _tmp13 * points_3_(0, 0) +
                          _tmp4 * points_3_(1, 0) + _world_T_lidar[5] - centroids_3_(1, 0)) +
      normals_3_(2, 0) * (_tmp16 * points_3_(2, 0) + _tmp17 * points_3_(1, 0) +
                          _tmp21 * points_3_(0, 0) + _world_T_lidar[6] - centroids_3_(2, 0));
  const Scalar _tmp30 =
      normals_4_(0, 0) * (_tmp22 * points_4_(0, 0) + _tmp24 * points_4_(1, 0) +
                          _tmp25 * points_4_(2, 0) + _world_T_lidar[4] - centroids_4_(0, 0)) +
      normals_4_(1, 0) * (_tmp10 * points_4_(2, 0) + _tmp13 * points_4_(0, 0) +
                          _tmp4 * points_4_(1, 0) + _world_T_lidar[5] - centroids_4_(1, 0)) +
      normals_4_(2, 0) * (_tmp16 * points_4_(2, 0) + _tmp17 * points_4_(1, 0) +
                          _tmp21 * points_4_(0, 0) + _world_T_lidar[6] - centroids_4_(2, 0));
  const Scalar _tmp31 =
      normals_5_(0, 0) * (_tmp22 * points_5_(0, 0) + _tmp24 * points_5_(1, 0) +
                          _tmp25 * points_5_(2, 0) + _world_T_lidar[4] - centroids_5_(0, 0)) +
      normals_5_(1, 0) * (_tmp10 * points_5_(2, 0) + _tmp13 * points_5_(0, 0) +
                          _tmp4 * points_5_(1, 0) + _world_T_lidar[5] - centroids_5_(1, 0)) +
      normals_5_(2, 0) * (_tmp16 * points_5_(2, 0) + _tmp17 * points_5_(1, 0) +
                          _tmp21 * points_5_(0, 0) + _world_T_lidar[6] - centroids_5_(2, 0));
  const Scalar _tmp32 = -_tmp11;
  const Scalar _tmp33 = _tmp12 + _tmp32;
  const Scalar _tmp34 = -_tmp14;
  const Scalar _tmp35 = std::pow(_world_T_lidar[3], Scalar(2));
  const Scalar _tmp36 = -_tmp35;
  const Scalar _tmp37 = _tmp0 + _tmp2 + _tmp34 + _tmp36;
  const Scalar _tmp38 = -_tmp2;
  const Scalar _tmp39 = _tmp0 + _tmp38;
  const Scalar _tmp40 = _tmp34 + _tmp35;
  const Scalar _tmp41 = _tmp39 + _tmp40;
  const Scalar _tmp42 = -_tmp9;
  const Scalar _tmp43 = _tmp42 + _tmp7;
  const Scalar _tmp44 = normals_5_(0, 0) * (_tmp25 * points_5_(1, 0) + _tmp33 * points_5_(2, 0)) +
                        normals_5_(1, 0) * (_tmp10 * points_5_(1, 0) + _tmp37 * points_5_(2, 0)) +
                        normals_5_(2, 0) * (_tmp41 * points_5_(1, 0) + _tmp43 * points_5_(2, 0));
  const Scalar _tmp45 = normals_0_(0, 0) * (_tmp25 * points_0_(1, 0) + _tmp33 * points_0_(2, 0)) +
                        normals_0_(1, 0) * (_tmp10 * points_0_(1, 0) + _tmp37 * points_0_(2, 0)) +
                        normals_0_(2, 0) * (_tmp41 * points_0_(1, 0) + _tmp43 * points_0_(2, 0));
  const Scalar _tmp46 = normals_4_(0, 0) * (_tmp25 * points_4_(1, 0) + _tmp33 * points_4_(2, 0)) +
                        normals_4_(1, 0) * (_tmp10 * points_4_(1, 0) + _tmp37 * points_4_(2, 0)) +
                        normals_4_(2, 0) * (_tmp41 * points_4_(1, 0) + _tmp43 * points_4_(2, 0));
  const Scalar _tmp47 = normals_3_(0, 0) * (_tmp25 * points_3_(1, 0) + _tmp33 * points_3_(2, 0)) +
                        normals_3_(1, 0) * (_tmp10 * points_3_(1, 0) + _tmp37 * points_3_(2, 0)) +
                        normals_3_(2, 0) * (_tmp41 * points_3_(1, 0) + _tmp43 * points_3_(2, 0));
  const Scalar _tmp48 = normals_2_(0, 0) * (_tmp25 * points_2_(1, 0) + _tmp33 * points_2_(2, 0)) +
                        normals_2_(1, 0) * (_tmp10 * points_2_(1, 0) + _tmp37 * points_2_(2, 0)) +
                        normals_2_(2, 0) * (_tmp41 * points_2_(1, 0) + _tmp43 * points_2_(2, 0));
  const Scalar _tmp49 = normals_1_(0, 0) * (_tmp25 * points_1_(1, 0) + _tmp33 * points_1_(2, 0)) +
                        normals_1_(1, 0) * (_tmp10 * points_1_(1, 0) + _tmp37 * points_1_(2, 0)) +
                        normals_1_(2, 0) * (_tmp41 * points_1_(1, 0) + _tmp43 * points_1_(2, 0));
  const Scalar _tmp50 = -_tmp0;
  const Scalar _tmp51 = _tmp2 + _tmp50;
  const Scalar _tmp52 = _tmp40 + _tmp51;
  const Scalar _tmp53 = -_tmp18;
  const Scalar _tmp54 = _tmp20 + _tmp53;
  const Scalar _tmp55 = _tmp14 + _tmp36;
  const Scalar _tmp56 = _tmp51 + _tmp55;
  const Scalar _tmp57 = _tmp42 + _tmp6;
  const Scalar _tmp58 = normals_1_(0, 0) * (_tmp52 * points_1_(2, 0) + _tmp54 * points_1_(0, 0)) +
                        normals_1_(1, 0) * (_tmp13 * points_1_(2, 0) + _tmp57 * points_1_(0, 0)) +
                        normals_1_(2, 0) * (_tmp21 * points_1_(2, 0) + _tmp56 * points_1_(0, 0));
  const Scalar _tmp59 = normals_2_(0, 0) * (_tmp52 * points_2_(2, 0) + _tmp54 * points_2_(0, 0)) +
                        normals_2_(1, 0) * (_tmp13 * points_2_(2, 0) + _tmp57 * points_2_(0, 0)) +
                        normals_2_(2, 0) * (_tmp21 * points_2_(2, 0) + _tmp56 * points_2_(0, 0));
  const Scalar _tmp60 = normals_5_(0, 0) * (_tmp52 * points_5_(2, 0) + _tmp54 * points_5_(0, 0)) +
                        normals_5_(1, 0) * (_tmp13 * points_5_(2, 0) + _tmp57 * points_5_(0, 0)) +
                        normals_5_(2, 0) * (_tmp21 * points_5_(2, 0) + _tmp56 * points_5_(0, 0));
  const Scalar _tmp61 = normals_4_(0, 0) * (_tmp52 * points_4_(2, 0) + _tmp54 * points_4_(0, 0)) +
                        normals_4_(1, 0) * (_tmp13 * points_4_(2, 0) + _tmp57 * points_4_(0, 0)) +
                        normals_4_(2, 0) * (_tmp21 * points_4_(2, 0) + _tmp56 * points_4_(0, 0));
  const Scalar _tmp62 = normals_3_(0, 0) * (_tmp52 * points_3_(2, 0) + _tmp54 * points_3_(0, 0)) +
                        normals_3_(1, 0) * (_tmp13 * points_3_(2, 0) + _tmp57 * points_3_(0, 0)) +
                        normals_3_(2, 0) * (_tmp21 * points_3_(2, 0) + _tmp56 * points_3_(0, 0));
  const Scalar _tmp63 = normals_0_(0, 0) * (_tmp52 * points_0_(2, 0) + _tmp54 * points_0_(0, 0)) +
                        normals_0_(1, 0) * (_tmp13 * points_0_(2, 0) + _tmp57 * points_0_(0, 0)) +
                        normals_0_(2, 0) * (_tmp21 * points_0_(2, 0) + _tmp56 * points_0_(0, 0));
  const Scalar _tmp64 = _tmp19 + _tmp53;
  const Scalar _tmp65 = _tmp39 + _tmp55;
  const Scalar _tmp66 = _tmp14 + _tmp35 + _tmp38 + _tmp50;
  const Scalar _tmp67 = _tmp23 + _tmp32;
  const Scalar _tmp68 = normals_5_(0, 0) * (_tmp24 * points_5_(0, 0) + _tmp65 * points_5_(1, 0)) +
                        normals_5_(1, 0) * (_tmp66 * points_5_(0, 0) + _tmp67 * points_5_(1, 0)) +
                        normals_5_(2, 0) * (_tmp17 * points_5_(0, 0) + _tmp64 * points_5_(1, 0));
  const Scalar _tmp69 = normals_3_(0, 0) * (_tmp24 * points_3_(0, 0) + _tmp65 * points_3_(1, 0)) +
                        normals_3_(1, 0) * (_tmp66 * points_3_(0, 0) + _tmp67 * points_3_(1, 0)) +
                        normals_3_(2, 0) * (_tmp17 * points_3_(0, 0) + _tmp64 * points_3_(1, 0));
  const Scalar _tmp70 = normals_1_(0, 0) * (_tmp24 * points_1_(0, 0) + _tmp65 * points_1_(1, 0)) +
                        normals_1_(1, 0) * (_tmp66 * points_1_(0, 0) + _tmp67 * points_1_(1, 0)) +
                        normals_1_(2, 0) * (_tmp17 * points_1_(0, 0) + _tmp64 * points_1_(1, 0));
  const Scalar _tmp71 = normals_4_(0, 0) * (_tmp24 * points_4_(0, 0) + _tmp65 * points_4_(1, 0)) +
                        normals_4_(1, 0) * (_tmp66 * points_4_(0, 0) + _tmp67 * points_4_(1, 0)) +
                        normals_4_(2, 0) * (_tmp17 * points_4_(0, 0) + _tmp64 * points_4_(1, 0));
  const Scalar _tmp72 = normals_2_(0, 0) * (_tmp24 * points_2_(0, 0) + _tmp65 * points_2_(1, 0)) +
                        normals_2_(1, 0) * (_tmp66 * points_2_(0, 0) + _tmp67 * points_2_(1, 0)) +
                        normals_2_(2, 0) * (_tmp17 * points_2_(0, 0) + _tmp64 * points_2_(1, 0));
  const Scalar _tmp73 = normals_0_(0, 0) * (_tmp24 * points_0_(0, 0) + _tmp65 * points_0_(1, 0)) +
                        normals_0_(1, 0) * (_tmp66 * points_0_(0, 0) + _tmp67 * points_0_(1, 0)) +
                        normals_0_(2, 0) * (_tmp17 * points_0_(0, 0) + _tmp64 * points_0_(1, 0));

  // Output terms (4)
  if (residual != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _residual = (*residual);

    _residual(0, 0) = _tmp26;
    _residual(1, 0) = _tmp27;
    _residual(2, 0) = _tmp28;
    _residual(3, 0) = _tmp29;
    _residual(4, 0) = _tmp30;
    _residual(5, 0) = _tmp31;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp26 * _tmp45 + _tmp27 * _tmp49 + _tmp28 * _tmp48 + _tmp29 * _tmp47 +
                 _tmp30 * _tmp46 + _tmp31 * _tmp44;
    _rhs(1, 0) = _tmp26 * _tmp63 + _tmp27 * _tmp58 + _tmp28 * _tmp59 + _tmp29 * _tmp62 +
                 _tmp30 * _tmp61 + _tmp31 * _tmp60;
    _rhs(2, 0) = _tmp26 * _tmp73 + _tmp27 * _tmp70 + _tmp28 * _tmp72 + _tmp29 * _tmp69 +
                 _tmp30 * _tmp71 + _tmp31 * _tmp68;
    _rhs(3, 0) = _tmp26 * normals_0_(0, 0) + _tmp27 * normals_1_(0, 0) + _tmp28 * normals_2_(0, 0) +
                 _tmp29 * normals_3_(0, 0) + _tmp30 * normals_4_(0, 0) + _tmp31 * normals_5_(0, 0);
    _rhs(4, 0) = _tmp26 * normals_0_(1, 0) + _tmp27 * normals_1_(1, 0) + _tmp28 * normals_2_(1, 0) +
                 _tmp29 * normals_3_(1, 0) + _tmp30 * normals_4_(1, 0) + _tmp31 * normals_5_(1, 0);
    _rhs(5, 0) = _tmp26 * normals_0_(2, 0) + _tmp27 * normals_1_(2, 0) + _tmp28 * normals_2_(2, 0) +
                 _tmp29 * normals_3_(2, 0) + _tmp30 * normals_4_(2, 0) + _tmp31 * normals_5_(2, 0);
  }

  if (jacobian != nullptr) {
    static constexpr int kRows_jacobian = 6;
    static constexpr int kCols_jacobian = 6;
    static constexpr int kNumNonZero_jacobian = 36;
    static constexpr int kColPtrs_jacobian[] = {0, 6, 12, 18, 24, 30, 36};
    static constexpr int kRowIndices_jacobian[] = {0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5,
                                                   0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5,
                                                   0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5};
    if (jacobian->nonZeros() != 36 || jacobian->outerSize() != 6 || jacobian->innerSize() != 6 ||
        !jacobian->isCompressed()) {
      // Matrix does not have the expected layout, create a correctly initialized sparse matrix
      Scalar jacobian_empty_value_ptr[36];
      *jacobian = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
          kRows_jacobian, kCols_jacobian, kNumNonZero_jacobian, kColPtrs_jacobian,
          kRowIndices_jacobian, jacobian_empty_value_ptr);
    }
    Scalar* jacobian_value_ptr = jacobian->valuePtr();

    jacobian_value_ptr[0] = _tmp45;
    jacobian_value_ptr[1] = _tmp49;
    jacobian_value_ptr[2] = _tmp48;
    jacobian_value_ptr[3] = _tmp47;
    jacobian_value_ptr[4] = _tmp46;
    jacobian_value_ptr[5] = _tmp44;
    jacobian_value_ptr[6] = _tmp63;
    jacobian_value_ptr[7] = _tmp58;
    jacobian_value_ptr[8] = _tmp59;
    jacobian_value_ptr[9] = _tmp62;
    jacobian_value_ptr[10] = _tmp61;
    jacobian_value_ptr[11] = _tmp60;
    jacobian_value_ptr[12] = _tmp73;
    jacobian_value_ptr[13] = _tmp70;
    jacobian_value_ptr[14] = _tmp72;
    jacobian_value_ptr[15] = _tmp69;
    jacobian_value_ptr[16] = _tmp71;
    jacobian_value_ptr[17] = _tmp68;
    jacobian_value_ptr[18] = normals_0_(0, 0);
    jacobian_value_ptr[19] = normals_1_(0, 0);
    jacobian_value_ptr[20] = normals_2_(0, 0);
    jacobian_value_ptr[21] = normals_3_(0, 0);
    jacobian_value_ptr[22] = normals_4_(0, 0);
    jacobian_value_ptr[23] = normals_5_(0, 0);
    jacobian_value_ptr[24] = normals_0_(1, 0);
    jacobian_value_ptr[25] = normals_1_(1, 0);
    jacobian_value_ptr[26] = normals_2_(1, 0);
    jacobian_value_ptr[27] = normals_3_(1, 0);
    jacobian_value_ptr[28] = normals_4_(1, 0);
    jacobian_value_ptr[29] = normals_5_(1, 0);
    jacobian_value_ptr[30] = normals_0_(2, 0);
    jacobian_value_ptr[31] = normals_1_(2, 0);
    jacobian_value_ptr[32] = normals_2_(2, 0);
    jacobian_value_ptr[33] = normals_3_(2, 0);
    jacobian_value_ptr[34] = normals_4_(2, 0);
    jacobian_value_ptr[35] = normals_5_(2, 0);
  }

  if (hessian != nullptr) {
    static constexpr int kRows_hessian = 6;
    static constexpr int kCols_hessian = 6;
    static constexpr int kNumNonZero_hessian = 21;
    static constexpr int kColPtrs_hessian[] = {0, 6, 11, 15, 18, 20, 21};
    static constexpr int kRowIndices_hessian[] = {0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5,
                                                  2, 3, 4, 5, 3, 4, 5, 4, 5, 5};
    if (hessian->nonZeros() != 21 || hessian->outerSize() != 6 || hessian->innerSize() != 6 ||
        !hessian->isCompressed()) {
      // Matrix does not have the expected layout, create a correctly initialized sparse matrix
      Scalar hessian_empty_value_ptr[21];
      *hessian = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
          kRows_hessian, kCols_hessian, kNumNonZero_hessian, kColPtrs_hessian, kRowIndices_hessian,
          hessian_empty_value_ptr);
    }
    Scalar* hessian_value_ptr = hessian->valuePtr();

    hessian_value_ptr[0] = std::pow(_tmp44, Scalar(2)) + std::pow(_tmp45, Scalar(2)) +
                           std::pow(_tmp46, Scalar(2)) + std::pow(_tmp47, Scalar(2)) +
                           std::pow(_tmp48, Scalar(2)) + std::pow(_tmp49, Scalar(2));
    hessian_value_ptr[1] = _tmp44 * _tmp60 + _tmp45 * _tmp63 + _tmp46 * _tmp61 + _tmp47 * _tmp62 +
                           _tmp48 * _tmp59 + _tmp49 * _tmp58;
    hessian_value_ptr[2] = _tmp44 * _tmp68 + _tmp45 * _tmp73 + _tmp46 * _tmp71 + _tmp47 * _tmp69 +
                           _tmp48 * _tmp72 + _tmp49 * _tmp70;
    hessian_value_ptr[3] = _tmp44 * normals_5_(0, 0) + _tmp45 * normals_0_(0, 0) +
                           _tmp46 * normals_4_(0, 0) + _tmp47 * normals_3_(0, 0) +
                           _tmp48 * normals_2_(0, 0) + _tmp49 * normals_1_(0, 0);
    hessian_value_ptr[4] = _tmp44 * normals_5_(1, 0) + _tmp45 * normals_0_(1, 0) +
                           _tmp46 * normals_4_(1, 0) + _tmp47 * normals_3_(1, 0) +
                           _tmp48 * normals_2_(1, 0) + _tmp49 * normals_1_(1, 0);
    hessian_value_ptr[5] = _tmp44 * normals_5_(2, 0) + _tmp45 * normals_0_(2, 0) +
                           _tmp46 * normals_4_(2, 0) + _tmp47 * normals_3_(2, 0) +
                           _tmp48 * normals_2_(2, 0) + _tmp49 * normals_1_(2, 0);
    hessian_value_ptr[6] = std::pow(_tmp58, Scalar(2)) + std::pow(_tmp59, Scalar(2)) +
                           std::pow(_tmp60, Scalar(2)) + std::pow(_tmp61, Scalar(2)) +
                           std::pow(_tmp62, Scalar(2)) + std::pow(_tmp63, Scalar(2));
    hessian_value_ptr[7] = _tmp58 * _tmp70 + _tmp59 * _tmp72 + _tmp60 * _tmp68 + _tmp61 * _tmp71 +
                           _tmp62 * _tmp69 + _tmp63 * _tmp73;
    hessian_value_ptr[8] = _tmp58 * normals_1_(0, 0) + _tmp59 * normals_2_(0, 0) +
                           _tmp60 * normals_5_(0, 0) + _tmp61 * normals_4_(0, 0) +
                           _tmp62 * normals_3_(0, 0) + _tmp63 * normals_0_(0, 0);
    hessian_value_ptr[9] = _tmp58 * normals_1_(1, 0) + _tmp59 * normals_2_(1, 0) +
                           _tmp60 * normals_5_(1, 0) + _tmp61 * normals_4_(1, 0) +
                           _tmp62 * normals_3_(1, 0) + _tmp63 * normals_0_(1, 0);
    hessian_value_ptr[10] = _tmp58 * normals_1_(2, 0) + _tmp59 * normals_2_(2, 0) +
                            _tmp60 * normals_5_(2, 0) + _tmp61 * normals_4_(2, 0) +
                            _tmp62 * normals_3_(2, 0) + _tmp63 * normals_0_(2, 0);
    hessian_value_ptr[11] = std::pow(_tmp68, Scalar(2)) + std::pow(_tmp69, Scalar(2)) +
                            std::pow(_tmp70, Scalar(2)) + std::pow(_tmp71, Scalar(2)) +
                            std::pow(_tmp72, Scalar(2)) + std::pow(_tmp73, Scalar(2));
    hessian_value_ptr[12] = _tmp68 * normals_5_(0, 0) + _tmp69 * normals_3_(0, 0) +
                            _tmp70 * normals_1_(0, 0) + _tmp71 * normals_4_(0, 0) +
                            _tmp72 * normals_2_(0, 0) + _tmp73 * normals_0_(0, 0);
    hessian_value_ptr[13] = _tmp68 * normals_5_(1, 0) + _tmp69 * normals_3_(1, 0) +
                            _tmp70 * normals_1_(1, 0) + _tmp71 * normals_4_(1, 0) +
                            _tmp72 * normals_2_(1, 0) + _tmp73 * normals_0_(1, 0);
    hessian_value_ptr[14] = _tmp68 * normals_5_(2, 0) + _tmp69 * normals_3_(2, 0) +
                            _tmp70 * normals_1_(2, 0) + _tmp71 * normals_4_(2, 0) +
                            _tmp72 * normals_2_(2, 0) + _tmp73 * normals_0_(2, 0);
    hessian_value_ptr[15] =
        std::pow(normals_0_(0, 0), Scalar(2)) + std::pow(normals_1_(0, 0), Scalar(2)) +
        std::pow(normals_2_(0, 0), Scalar(2)) + std::pow(normals_3_(0, 0), Scalar(2)) +
        std::pow(normals_4_(0, 0), Scalar(2)) + std::pow(normals_5_(0, 0), Scalar(2));
    hessian_value_ptr[16] =
        normals_0_(0, 0) * normals_0_(1, 0) + normals_1_(0, 0) * normals_1_(1, 0) +
        normals_2_(0, 0) * normals_2_(1, 0) + normals_3_(0, 0) * normals_3_(1, 0) +
        normals_4_(0, 0) * normals_4_(1, 0) + normals_5_(0, 0) * normals_5_(1, 0);
    hessian_value_ptr[17] =
        normals_0_(0, 0) * normals_0_(2, 0) + normals_1_(0, 0) * normals_1_(2, 0) +
        normals_2_(0, 0) * normals_2_(2, 0) + normals_3_(0, 0) * normals_3_(2, 0) +
        normals_4_(0, 0) * normals_4_(2, 0) + normals_5_(0, 0) * normals_5_(2, 0);
    hessian_value_ptr[18] =
        std::pow(normals_0_(1, 0), Scalar(2)) + std::pow(normals_1_(1, 0), Scalar(2)) +
        std::pow(normals_2_(1, 0), Scalar(2)) + std::pow(normals_3_(1, 0), Scalar(2)) +
        std::pow(normals_4_(1, 0), Scalar(2)) + std::pow(normals_5_(1, 0), Scalar(2));
    hessian_value_ptr[19] =
        normals_0_(1, 0) * normals_0_(2, 0) + normals_1_(1, 0) * normals_1_(2, 0) +
        normals_2_(1, 0) * normals_2_(2, 0) + normals_3_(1, 0) * normals_3_(2, 0) +
        normals_4_(1, 0) * normals_4_(2, 0) + normals_5_(1, 0) * normals_5_(2, 0);
    hessian_value_ptr[20] =
        std::pow(normals_0_(2, 0), Scalar(2)) + std::pow(normals_1_(2, 0), Scalar(2)) +
        std::pow(normals_2_(2, 0), Scalar(2)) + std::pow(normals_3_(2, 0), Scalar(2)) +
        std::pow(normals_4_(2, 0), Scalar(2)) + std::pow(normals_5_(2, 0), Scalar(2));
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
