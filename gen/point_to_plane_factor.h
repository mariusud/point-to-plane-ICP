// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace ICP {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: point_to_plane_residual
 *
 * Args:
 *     world_T_lidar: Pose3
 *     point_lidar: Matrix31
 *     centroid_world: Matrix31
 *     normal_world: Matrix31
 *
 * Outputs:
 *     res: Matrix11
 *     jacobian: (1x6) jacobian of res wrt arg world_T_lidar (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg world_T_lidar (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg world_T_lidar (6)
 */
template <typename Scalar>
void PointToPlaneFactor(const sym::Pose3<Scalar>& world_T_lidar,
                        const Eigen::Matrix<Scalar, 3, 1>& point_lidar,
                        const Eigen::Matrix<Scalar, 3, 1>& centroid_world,
                        const Eigen::Matrix<Scalar, 3, 1>& normal_world,
                        Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                        Eigen::Matrix<Scalar, 1, 6>* const jacobian = nullptr,
                        Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                        Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 154

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _world_T_lidar = world_T_lidar.Data();

  // Intermediate terms (39)
  const Scalar _tmp0 = std::pow(_world_T_lidar[2], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_world_T_lidar[0], Scalar(2));
  const Scalar _tmp3 = -2 * _tmp2;
  const Scalar _tmp4 = 2 * _world_T_lidar[0];
  const Scalar _tmp5 = _tmp4 * _world_T_lidar[1];
  const Scalar _tmp6 = 2 * _world_T_lidar[2] * _world_T_lidar[3];
  const Scalar _tmp7 = _tmp5 + _tmp6;
  const Scalar _tmp8 = _tmp4 * _world_T_lidar[3];
  const Scalar _tmp9 = -_tmp8;
  const Scalar _tmp10 = 2 * _world_T_lidar[1];
  const Scalar _tmp11 = _tmp10 * _world_T_lidar[2];
  const Scalar _tmp12 = _tmp11 + _tmp9;
  const Scalar _tmp13 = std::pow(_world_T_lidar[1], Scalar(2));
  const Scalar _tmp14 = 1 - 2 * _tmp13;
  const Scalar _tmp15 = _tmp4 * _world_T_lidar[2];
  const Scalar _tmp16 = _tmp10 * _world_T_lidar[3];
  const Scalar _tmp17 = -_tmp16;
  const Scalar _tmp18 = _tmp15 + _tmp17;
  const Scalar _tmp19 = _tmp11 + _tmp8;
  const Scalar _tmp20 = _tmp15 + _tmp16;
  const Scalar _tmp21 = -_tmp6;
  const Scalar _tmp22 = _tmp21 + _tmp5;
  const Scalar _tmp23 =
      normal_world(0, 0) *
          (_tmp20 * point_lidar(2, 0) + _tmp22 * point_lidar(1, 0) + _world_T_lidar[4] -
           centroid_world(0, 0) + point_lidar(0, 0) * (_tmp1 + _tmp14)) +
      normal_world(1, 0) *
          (_tmp12 * point_lidar(2, 0) + _tmp7 * point_lidar(0, 0) + _world_T_lidar[5] -
           centroid_world(1, 0) + point_lidar(1, 0) * (_tmp1 + _tmp3 + 1)) +
      normal_world(2, 0) *
          (_tmp18 * point_lidar(0, 0) + _tmp19 * point_lidar(1, 0) + _world_T_lidar[6] -
           centroid_world(2, 0) + point_lidar(2, 0) * (_tmp14 + _tmp3));
  const Scalar _tmp24 = -_tmp5;
  const Scalar _tmp25 = -_tmp13;
  const Scalar _tmp26 = std::pow(_world_T_lidar[3], Scalar(2));
  const Scalar _tmp27 = _tmp25 + _tmp26;
  const Scalar _tmp28 = -_tmp2;
  const Scalar _tmp29 = _tmp0 + _tmp28;
  const Scalar _tmp30 = -_tmp11;
  const Scalar _tmp31 = -_tmp26;
  const Scalar _tmp32 =
      normal_world(0, 0) * (_tmp20 * point_lidar(1, 0) + point_lidar(2, 0) * (_tmp24 + _tmp6)) +
      normal_world(1, 0) *
          (_tmp12 * point_lidar(1, 0) + point_lidar(2, 0) * (_tmp0 + _tmp2 + _tmp25 + _tmp31)) +
      normal_world(2, 0) *
          (point_lidar(1, 0) * (_tmp27 + _tmp29) + point_lidar(2, 0) * (_tmp30 + _tmp9));
  const Scalar _tmp33 = -_tmp0;
  const Scalar _tmp34 = _tmp2 + _tmp33;
  const Scalar _tmp35 = -_tmp15;
  const Scalar _tmp36 = _tmp13 + _tmp31;
  const Scalar _tmp37 =
      normal_world(0, 0) *
          (point_lidar(0, 0) * (_tmp17 + _tmp35) + point_lidar(2, 0) * (_tmp27 + _tmp34)) +
      normal_world(1, 0) * (_tmp7 * point_lidar(2, 0) + point_lidar(0, 0) * (_tmp30 + _tmp8)) +
      normal_world(2, 0) * (_tmp18 * point_lidar(2, 0) + point_lidar(0, 0) * (_tmp34 + _tmp36));
  const Scalar _tmp38 =
      normal_world(0, 0) * (_tmp22 * point_lidar(0, 0) + point_lidar(1, 0) * (_tmp29 + _tmp36)) +
      normal_world(1, 0) * (point_lidar(0, 0) * (_tmp13 + _tmp26 + _tmp28 + _tmp33) +
                            point_lidar(1, 0) * (_tmp21 + _tmp24)) +
      normal_world(2, 0) * (_tmp19 * point_lidar(0, 0) + point_lidar(1, 0) * (_tmp16 + _tmp35));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = _tmp23;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp32;
    _jacobian(0, 1) = _tmp37;
    _jacobian(0, 2) = _tmp38;
    _jacobian(0, 3) = normal_world(0, 0);
    _jacobian(0, 4) = normal_world(1, 0);
    _jacobian(0, 5) = normal_world(2, 0);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp32, Scalar(2));
    _hessian(1, 0) = _tmp32 * _tmp37;
    _hessian(2, 0) = _tmp32 * _tmp38;
    _hessian(3, 0) = _tmp32 * normal_world(0, 0);
    _hessian(4, 0) = _tmp32 * normal_world(1, 0);
    _hessian(5, 0) = _tmp32 * normal_world(2, 0);
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp37, Scalar(2));
    _hessian(2, 1) = _tmp37 * _tmp38;
    _hessian(3, 1) = _tmp37 * normal_world(0, 0);
    _hessian(4, 1) = _tmp37 * normal_world(1, 0);
    _hessian(5, 1) = _tmp37 * normal_world(2, 0);
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp38, Scalar(2));
    _hessian(3, 2) = _tmp38 * normal_world(0, 0);
    _hessian(4, 2) = _tmp38 * normal_world(1, 0);
    _hessian(5, 2) = _tmp38 * normal_world(2, 0);
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(normal_world(0, 0), Scalar(2));
    _hessian(4, 3) = normal_world(0, 0) * normal_world(1, 0);
    _hessian(5, 3) = normal_world(0, 0) * normal_world(2, 0);
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(normal_world(1, 0), Scalar(2));
    _hessian(5, 4) = normal_world(1, 0) * normal_world(2, 0);
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(normal_world(2, 0), Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp23 * _tmp32;
    _rhs(1, 0) = _tmp23 * _tmp37;
    _rhs(2, 0) = _tmp23 * _tmp38;
    _rhs(3, 0) = _tmp23 * normal_world(0, 0);
    _rhs(4, 0) = _tmp23 * normal_world(1, 0);
    _rhs(5, 0) = _tmp23 * normal_world(2, 0);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace ICP
